(require "ni/defs")
(provide "ni/macro")
(lisp::in-package-1 "netinst")
(system:*fset 'site-value '(macro (key site) (block site-value (list 'cdr (list* 'assoc key site '(:test #'equal))))))
(system:*fset 'site-name '(macro (site) (block site-name (list 'site-value '"name" site))))
(system:*fset 'site-author '(macro (site) (block site-author (list 'site-value '"author" site))))
(system:*fset 'site-src '(macro (site) (block site-src (list 'site-value '"src" site))))
(system:*fset 'site-url '(macro (site) (block site-url (list 'site-value '"url" site))))
(system:*fset 'site-description '(macro (site) (block site-description (list 'site-value '"description" site))))
(system:*fset 'site-apps '(macro (site) (block site-apps (list 'site-value '"packages" site))))
(system:*fset 'app-value '(macro (key app) (block app-value (list 'cdr (list* 'assoc key app '(:test #'equal))))))
(system:*fset 'app-name '(macro (app) (block app-name (list 'app-value '"name" app))))
(system:*fset 'app-version '(macro (app) (block app-version (list 'app-value '"version" app))))
(system:*fset 'app-description '(macro (app) (block app-description (list 'app-value '"description" app))))
(system:*fset 'app-file '(macro (app) (block app-file (list 'app-value '"file" app))))
(system:*fset 'app-src '(macro (app) (block app-src (list 'app-value '"src" app))))
(system:*fset 'app-md5 '(macro (app) (block app-md5 (list 'app-value '"md5" app))))
(system:*fset 'app-time '(macro (app) (block app-time (list 'app-value '"time" app))))
(system:*fset 'app-site '(macro (app) (block app-site (list 'app-value '"site" app))))
(system:*fset 'app-author '(macro (app) (block app-author (list 'app-value '"author" app))))
(system:*fset 'app-depends '(macro (app) (block app-depends (list 'app-value '"depends" app))))
(system:*fset 'app-changes '(macro (app) (block app-changes (list 'app-value '"changes" app))))
(system:*fset 'app-notice '(macro (app) (block app-notice (list 'app-value '"notice" app))))
(system:*fset 'app-load-after-install '(macro (app) (block app-load-after-install (list 'app-value '"load-after-install" app))))
(system:*fset 'app-load-before-uninstall '(macro (app) (block app-load-before-uninstall (list 'app-value '"load-before-uninstall" app))))
(system:*fset 'app-category '(macro (app) (block app-category (list 'app-value '"category" app))))
(system:*fset 'category-data-name '(macro (c) (block category-data-name (list 'car c))))
(system:*fset 'category-data-apps '(macro (c) (block category-data-apps (list 'cdr c))))
(system:*fset 'modify-read-only-buffer '(macro (&body body) (block modify-read-only-buffer (list* 'let '((buffer-read-only nil)) '(declare (special buffer-read-only)) body))))
(system:*putprop 'modify-read-only-buffer 1 'lisp-indent-hook)
